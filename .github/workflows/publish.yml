# This workflow will upload a Python Package using setup.py/twine when a release is created
# For more information see:
# https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Create Release

on:
  release:
    types: [published]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install build
        pip install build twine setuptools
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        # The PYPI_PASSWORD must be a pypi token with the "pypi-" prefix with sufficient permissions to upload this package
        # https://pypi.org/help/#apitoken
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python3 -m build
        twine upload dist/*
  make_cli_executable:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Make Executable
        shell: bash
        run: |
          python -m pip install pyinstaller .
          pyinstaller cli.spec
      - name: 'Setup Certificate'
        if: runner.os == 'Windows'
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash
      - name: 'Setup Code Signing Variables'
        if: runner.os == 'Windows'
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV" 
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV" 
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV" 
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV" 
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH 
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH 
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
        shell: bash
      - name: 'Setup SSM KSP on windows-latest'
        run: | 
          curl -X GET https://one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi
          msiexec /i smtools-windows-x64.msi /quiet /qn 
          smksp_registrar.exe list 
          smctl.exe keypair ls 
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user 
          smksp_cert_sync.exe
        shell: cmd
        env:
          SM_API_KEY: ${{secrets.SM_API_KEY}}
      - name: 'Signing using Signtool'
        run: | 
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "dist/doppkit-cli.exe" 
          signtool.exe verify /v /pa "dist\doppkit-cli.exe"
      - name: Zip Output
        run: |
          &"C:/Program Files/7-Zip/7z.exe" a ./dist/doppkit-cli.zip ./dist/doppkit-cli.exe
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/doppkit-cli.zip
            dist/doppkit-cli.exe
    env:
      SM_API_KEY: ${{secrets.SM_API_KEY}}
      SM_CLIENT_CERT_PASSWORD: ${{secrets.SM_CLIENT_CERT_PASSWORD}}
      SM_CLIENT_CERT_FILE: ${{secrets.SM_CLIENT_CERT_FILE}}
  make_gui_executable:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Make Executable
        shell: bash
        run: |
          python -m pip install pyinstaller .[GUI]
          pyinstaller gui.spec
      - name: 'Setup Certificate'
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | base64 --decode > /d/Certificate_pkcs12.p12
        shell: bash
      - name: 'Setup Code Signing Variables'
        if: runner.os == 'Windows'
        run: |
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> "$GITHUB_ENV" 
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> "$GITHUB_ENV" 
          echo "SM_CLIENT_CERT_FILE=D:\\Certificate_pkcs12.p12" >> "$GITHUB_ENV" 
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> "$GITHUB_ENV" 
          echo "C:\Program Files (x86)\Windows Kits\10\App Certification Kit" >> $GITHUB_PATH 
          echo "C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools" >> $GITHUB_PATH 
          echo "C:\Program Files\DigiCert\DigiCert One Signing Manager Tools" >> $GITHUB_PATH
        shell: bash
      - name: 'Setup SSM KSP on windows-latest'
        run: | 
          curl -X GET https://one.digicert.com/signingmanager/api-ui/v1/releases/smtools-windows-x64.msi/download -H "x-api-key:%SM_API_KEY%" -o smtools-windows-x64.msi
          msiexec /i smtools-windows-x64.msi /quiet /qn 
          smksp_registrar.exe list 
          smctl.exe keypair ls 
          C:\Windows\System32\certutil.exe -csp "DigiCert Signing Manager KSP" -key -user 
          smksp_cert_sync.exe
        shell: cmd
        env:
          SM_API_KEY: ${{secrets.SM_API_KEY}}
      - name: 'Signing using Signtool'
        run: | 
          signtool.exe sign /sha1 ${{ secrets.SM_CODE_SIGNING_CERT_SHA1_HASH }} /tr http://timestamp.digicert.com /td SHA256 /fd SHA256 "dist/doppkit.exe" 
          signtool.exe verify /v /pa "dist\doppkit.exe"
      - name: Zip Output
        run: |
          &"C:/Program Files/7-Zip/7z.exe" a ./dist/doppkit.zip ./dist/doppkit.exe
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/doppkit.zip
            dist/doppkit.exe
    env:
      SM_API_KEY: ${{secrets.SM_API_KEY}}
      SM_CLIENT_CERT_PASSWORD: ${{secrets.SM_CLIENT_CERT_PASSWORD}}
      SM_CLIENT_CERT_FILE: ${{secrets.SM_CLIENT_CERT_FILE}}
